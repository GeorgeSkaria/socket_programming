#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define WINDOW_SIZE 3
#define PACKETS 10

int main() {
    int ServerSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (ServerSocket == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in Server;
    socklen_t addrlen = sizeof(Server);
    Server.sin_family = AF_INET;
    Server.sin_port = htons(5000);
    Server.sin_addr.s_addr = inet_addr("127.0.0.1");

    if (bind(ServerSocket, (struct sockaddr *)&Server, sizeof(Server)) == -1) {
        perror("Error binding");
        exit(EXIT_FAILURE);
    }

    if (listen(ServerSocket, 2) == -1) {
        perror("Error listening");
        exit(EXIT_FAILURE);
    }

    int ClientAccept = accept(ServerSocket, (struct sockaddr *)&Server, &addrlen);
    if (ClientAccept == -1) {
        perror("Error accepting client");
        exit(EXIT_FAILURE);
    }

    int CountPackets = 0;
    while (CountPackets < PACKETS) {
        int Frames[WINDOW_SIZE];
        if (recv(ClientAccept, &Frames, sizeof(Frames), 0) == -1) {
            perror("Error receiving");
            exit(EXIT_FAILURE);
        }

        int Random = rand() % PACKETS;
        for (int i = 0; i < WINDOW_SIZE; i++) {
            if (Random == Frames[i]) {
                printf("Packet %d discarded, please resend\n", Random);
                if (send(ClientAccept, &Random, sizeof(Random), 0) == -1) {
                    perror("Error sending");
                    exit(EXIT_FAILURE);
                }
                break;
            } else if (Frames[i] != -1) {
                printf("Packet %d Received\n", Frames[i]);
                int Acknowledge = 999;
                if (send(ClientAccept, &Acknowledge, sizeof(Acknowledge), 0) == -1) {
                    perror("Error sending acknowledgement");
                    exit(EXIT_FAILURE);
                }
                CountPackets++;
            }
        }
    }

    close(ClientAccept);
    close(ServerSocket);
    return 0;
}
